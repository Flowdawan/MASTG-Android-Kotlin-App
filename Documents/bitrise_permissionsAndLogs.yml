---
format_version: '11'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: android
workflows:
  AppLogsMonitorDecompile:
    description: |
      Runs tests.

      Next steps:
      - Check out [Getting started with Android apps](https://devcenter.bitrise.io/en/getting-started/getting-started-with-android-apps.html).
    steps:
    - git-clone@8: {}
    - restore-gradle-cache@1: {}
    - install-missing-android-tools@3:
        inputs:
        - gradlew_path: "$PROJECT_LOCATION/gradlew"
    - android-build@1:
        inputs:
        - module: app
        - variant: debug
        is_always_run: true
    - apt-get-install@0:
        inputs:
        - packages: apktool
    - apps-decompiler@1:
        inputs:
        - decompile_ios: 'no'
    - script@1:
        is_always_run: true
        inputs:
        - content: |
            #!/usr/bin/env bash
            # - The -e option causes the shell to exit immediately if any command exits with a non-zero status.
            # - The -o pipefail option causes a pipeline to fail if any command in the pipeline fails, rather than just the last command.
            # - The -x option enables verbose mode, which causes the shell to print each command before executing it.
            set -eox pipefail

            if [[ ${log_count} != "" ]]; then
                LIMIT="$log_count"
            else
                LIMIT="0"
            fi

            if [[ ${check_android} == "yes" ]]; then
                if [ ! -d "apk_decompiled" ]; then
                    echo "ERROR: Cannot find any decompiled apk"
                    exit 1
                fi

                ALL_LOGS=$(grep -ri "Landroid/util/Log;->i(\|Landroid/util/Log;->v(\|Landroid/util/Log;->w(\|Landroid/util/Log;->d(\|Landroid/util/Log;->e(" apk_decompiled/.) || true

                if [[ ${filter_path} != "" ]]; then
                    echo "Filtered path 2: $filter_path"

                    LOGS=$(echo "$ALL_LOGS" | grep -v $filter_path || true)
                    COUNT_ANDROID_LOGS=$(echo "$ALL_LOGS" | grep -v $filter_path | wc -l)
                else
                    LOGS="$ALL_LOGS"
                    COUNT_ANDROID_LOGS=$(echo "$ALL_LOGS" | wc -l)
                fi
            fi

            echo "---- REPORT ----"

            if [ ! -f "quality_report.txt" ]; then
                printf "QUALITY REPORT\n\n\n" > quality_report.txt
            fi

            printf ">>>>>>>>>>  APP LOGS  <<<<<<<<<<\n" >> quality_report.txt

            if [[ ${COUNT_ANDROID_LOGS} == "" || ${COUNT_ANDROID_LOGS} -eq "0" ]]; then
                printf "0 log in your native Android code \n" >> quality_report.txt
            else
                if [[ ${COUNT_ANDROID_LOGS} != "" && ${COUNT_ANDROID_LOGS} -gt "0" ]]; then
                    printf "You have : $COUNT_ANDROID_LOGS logs in your Android code \n" >> quality_report.txt
                    printf "Reported logs: $LOGS\n" >> quality_report.txt
                fi
            fi

            printf "\n\n" >> quality_report.txt


            sed 's/apk_decompiled/\rapk_decompiled/g' quality_report.txt > $BITRISE_DEPLOY_DIR/quality_report.txt


            if [[ ${COUNT_ANDROID_LOGS} != "" && ${COUNT_ANDROID_LOGS} -gt $LIMIT ]]; then
                echo "Generate an error due to logs in your native codes"
                exit 1
            fi
            exit 0
    - script@1:
        inputs:
        - content: |
            #!/usr/bin/env bash
            # - The -e option causes the shell to exit immediately if any command exits with a non-zero status.
            # - The -o pipefail option causes a pipeline to fail if any command in the pipeline fails, rather than just the last command.
            # - The -x option enables verbose mode, which causes the shell to print each command before executing it.
            set -eox pipefail

            if [[ ${log_count} != "" ]]; then
                LIMIT="$log_count"
            else
                LIMIT="0"
            fi

            if [[ ${check_android} == "yes" ]]; then
                if [ ! -d "apk_decompiled" ]; then
                    echo "ERROR: Cannot find any decompiled apk"
                    exit 1
                fi

                ALL_LOGS=$(grep -ri "Landroid/util/Log;->i(\|Landroid/util/Log;->v(\|Landroid/util/Log;->w(\|Landroid/util/Log;->d(\|Landroid/util/Log;->e(" apk_decompiled/.) || true

                if [[ ${filter_path} != "" ]]; then
                    echo "Filtered path 2: $filter_path"

                    LOGS=$(echo "$ALL_LOGS" | grep -v $filter_path || true)
                    COUNT_ANDROID_LOGS=$(echo "$ALL_LOGS" | grep -v $filter_path | wc -l)
                else
                    LOGS="$ALL_LOGS"
                    COUNT_ANDROID_LOGS=$(echo "$ALL_LOGS" | wc -l)
                fi
            fi

            echo "---- REPORT ----"

            if [ ! -f "quality_report.txt" ]; then
                printf "QUALITY REPORT\n\n\n" > quality_report.txt
            fi

            printf ">>>>>>>>>>  APP LOGS  <<<<<<<<<<\n" >> quality_report.txt

            if [[ ${COUNT_ANDROID_LOGS} == "" || ${COUNT_ANDROID_LOGS} -eq "0" ]]; then
                printf "0 log in your native Android code \n" >> quality_report.txt
            else
                if [[ ${COUNT_ANDROID_LOGS} != "" && ${COUNT_ANDROID_LOGS} -gt "0" ]]; then
                    printf "You have : $COUNT_ANDROID_LOGS logs in your Android code \n" >> quality_report.txt
                    printf "Reported logs: $LOGS\n" >> quality_report.txt
                fi
            fi

            printf "\n\n" >> quality_report.txt


            sed 's/apk_decompiled/\rapk_decompiled/g' quality_report.txt > $BITRISE_DEPLOY_DIR/quality_report.txt


            if [[ ${COUNT_ANDROID_LOGS} != "" && ${COUNT_ANDROID_LOGS} -gt $LIMIT ]]; then
                echo "Generate an error due to logs in your native codes"
                exit 1
            fi
            exit 0
        is_always_run: true
    - save-gradle-cache@1:
        is_always_run: true
    - deploy-to-bitrise-io@2: {}
  deploy:
    description: |
      Deploys app using [Deploy to bitrise.io Step](https://devcenter.bitrise.io/en/getting-started/getting-started-with-android-apps.html#deploying-an-android-app-to-bitrise-io-53056).

      Next steps:
      - Check out [Getting started with Android apps](https://devcenter.bitrise.io/en/getting-started/getting-started-with-android-apps.html) for signing and deployment options.
      - [Set up code signing with *Android Sign* Step](https://devcenter.bitrise.io/en/code-signing/android-code-signing/android-code-signing-using-the-android-sign-step.html).
    steps:
    - git-clone@8: {}
    - install-missing-android-tools@3:
        inputs:
        - gradlew_path: "$PROJECT_LOCATION/gradlew"
    - change-android-versioncode-and-versionname@1:
        inputs:
        - build_gradle_path: "$PROJECT_LOCATION/$MODULE/build.gradle"
    - android-lint@0:
        inputs:
        - project_location: "$PROJECT_LOCATION"
        - variant: "$VARIANT"
        - cache_level: none
    - android-unit-test@1:
        inputs:
        - project_location: "$PROJECT_LOCATION"
        - variant: "$VARIANT"
        - cache_level: none
    - android-build@1:
        inputs:
        - project_location: "$PROJECT_LOCATION"
        - module: "$MODULE"
        - variant: "$VARIANT"
        - cache_level: none
    - sign-apk@1:
        run_if: '{{getenv "BITRISEIO_ANDROID_KEYSTORE_URL" | ne ""}}'
    - deploy-to-bitrise-io@2: {}
  final:
    description: |
      Runs tests.

      Next steps:
      - Check out [Getting started with Android apps](https://devcenter.bitrise.io/en/getting-started/getting-started-with-android-apps.html).
    steps:
    - git-clone@8: {}
    - restore-gradle-cache@1: {}
    - install-missing-android-tools@3:
        inputs:
        - gradlew_path: "$PROJECT_LOCATION/gradlew"
    - sonarqube-scanner@1: {}
    - android-build@1:
        inputs:
        - module: app
        - variant: debug
        is_always_run: true
    - scan-with-appsweep@1:
        inputs:
        - build_variant: debug
    - save-gradle-cache@1:
        is_always_run: true
    - deploy-to-bitrise-io@2: {}
  FinalWorkflow:
    description: |
      Runs tests.

      Next steps:
      - Check out [Getting started with Android apps](https://devcenter.bitrise.io/en/getting-started/getting-started-with-android-apps.html).
    steps:
    - git-clone@8: {}
    - restore-gradle-cache@1: {}
    - install-missing-android-tools@3:
        inputs:
        - gradlew_path: "$PROJECT_LOCATION/gradlew"
    - sonarqube-scanner@1:
        inputs:
        - is_debug: 'true'
        - scanner_properties: |-
            sonar.sources=.
            sonar.java.binaries=build/classes/kotlin/main
            sonar.login=a9af61a943ca2a684a2826bf95a95e9562a271ed
            #environment variables are evaluated
            sonar.projectKey=flowdawan
            sonar.host.url=https://sonarcloud.io/
            sonar.report.export.path=/bitrise/deploy/sonarqube-report.json
            sonar.organization=flowdawan
    - android-build@1:
        inputs:
        - module: app
        - variant: debug
        is_always_run: true
    - scan-with-appsweep@1:
        inputs:
        - build_variant: debug
    - save-gradle-cache@1:
        is_always_run: true
    - deploy-to-bitrise-io@2: {}
  primary:
    description: |
      Runs tests.

      Next steps:
      - Check out [Getting started with Android apps](https://devcenter.bitrise.io/en/getting-started/getting-started-with-android-apps.html).
    steps:
    - git-clone@8: {}
    - restore-gradle-cache@1: {}
    - install-missing-android-tools@3:
        inputs:
        - gradlew_path: "$PROJECT_LOCATION/gradlew"
    - android-lint@0:
        inputs:
        - module: "$MODULE"
        - variant: "$VARIANT"
    - snyk@1:
        inputs:
        - monitor: 'yes'
        - organization: 'e8822ecc-aed3-40a0-9f72-351f68a437d4 '
        - additional_arguments: ''
        - command: test --all-sub-projects
        - fail_on_issues: 'no'
        - severity_threshold: medium
        - create_report: 'yes'
    - android-build@1:
        inputs:
        - module: app
        - variant: debug
        is_always_run: true
    - save-gradle-cache@1:
        is_always_run: true
    - deploy-to-bitrise-io@2: {}
  SonarQube:
    description: |
      Runs tests.

      Next steps:
      - Check out [Getting started with Android apps](https://devcenter.bitrise.io/en/getting-started/getting-started-with-android-apps.html).
    steps:
    - git-clone@8: {}
    - restore-gradle-cache@1: {}
    - install-missing-android-tools@3:
        inputs:
        - gradlew_path: "$PROJECT_LOCATION/gradlew"
    - sonarqube-scanner@1:
        is_always_run: true
        inputs:
        - is_debug: 'true'
        - scanner_properties: |-
            sonar.sources=.
            sonar.java.binaries=build/classes/kotlin/main
            sonar.login=a9af61a943ca2a684a2826bf95a95e9562a271ed
            #environment variables are evaluated
            sonar.projectKey=flowdawan
            sonar.host.url=https://sonarcloud.io/
            sonar.report.export.path=/bitrise/deploy/sonarqube-report.json
            sonar.organization=flowdawan
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x

            # write your script here
            ls -lha /bitrise/deploy/
            cat /bitrise/deploy/sonarqube-report.json

            # or run a script from your repository, like:
            # bash ./path/to/script.sh
            # not just bash, e.g.:
            # ruby ./path/to/script.rb
    - android-build@1:
        inputs:
        - module: app
        - variant: debug
        is_always_run: true
    - save-gradle-cache@1:
        is_always_run: true
    - deploy-to-bitrise-io@2: {}
  testCategory:
    steps:
    - testproject-run@0: {}
    - saucelabs-espresso-app-automate@0: {}
    - browserstack-upload@0: {}
    - bitrise-step-nowsecure-auto-analysis@0: {}
    - pcloudy-app-upload@0: {}
    - flank@0: {}
    - bitrise-step-export-universal-apk@0: {}
    - fortify-on-demand-mobile-assessment@0: {}
    - testproject-upload@0: {}
    - bitrise-snyk-scan@0: {}
    - apptestai-test@0: {}
    - android-instrumented-test@0: {}
    - openstf-connect@0: {}
    - aws-device-farm-runner@0: {}
    - xcodebuild@0: {}
    - android-detekt@0: {}
    - repeato-test-runner@0: {}
    - parse-composer-results@0: {}
    - bitrise-step-qyrus-mobility-test-runner-android@0: {}
    - bitrise-step-eschecker@0: {}
  utilityCategory: {}
meta:
  bitrise.io:
    stack: linux-docker-android-20.04
    machine_type_id: standard
app:
  envs:
  - opts:
      is_expand: false
    PROJECT_LOCATION: "."
  - opts:
      is_expand: false
    MODULE: app
  - opts:
      is_expand: false
    VARIANT: debug
  - opts:
      is_expand: false
    check_android: 'yes'
  - opts:
      is_expand: false
    android_permission_count: '0'
